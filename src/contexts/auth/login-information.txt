# Meeting BaaS Authentication System

## Overview

Our authentication system provides multiple login methods while maintaining secure API access through cookies and tokens. This document explains how authentication flows work for different providers and how API access is maintained.

## Authentication Flow

### Core Components

1. **AuthContext**: Provides authentication state and methods to all components
2. **AuthProvider**: Implements authentication logic and maintains auth state
3. **LoginPage**: Renders the UI for authentication options

### Login Methods

#### Email/Password Authentication

1. User enters credentials in the LoginPage form
2. `auth.login()` is called with email/password
3. `loginApi()` sends credentials to backend via POST to `/accounts/login`
4. On success:
   - Auth token is stored in localStorage
   - `isAuthenticated` state is updated to true
   - User is redirected to the appropriate page

#### Google Authentication

1. User clicks Google auth button
2. Google OAuth flow is initiated via `@react-oauth/google`
3. On successful Google authentication:
   - Google returns a token ID credential
   - `login()` is called with empty username/password and the Google token
   - Backend validates the Google token and returns our application token
   - Auth flow completes as with email/password

#### Microsoft Authentication

1. Microsoft auth is triggered via `microsoftLogin()`
2. Token from Microsoft is passed to our authentication system
3. Backend validates the Microsoft token
4. Authentication state is updated and user is redirected

## Cookie & API Access

### How Cookies Work

1. After successful authentication, the server sets HTTP-only cookies
2. Axios is configured with `withCredentials: true` to send cookies with all requests
3. These cookies are automatically included in cross-origin requests

### Accessing API Endpoints

To access secure endpoints like `http://localhost:3001/accounts/api_key`:

1. User must be authenticated (logged in)
2. Requests are made with `withCredentials: true`
3. Auth cookies are automatically sent with the request
4. With `strict-origin-when-cross-origin` referrer policy, only the origin (not full path) is sent in cross-origin requests

### API Key Management

1. After login, the `CredentialsProvider` calls `fetchApiKey()` 
2. This makes an authenticated GET request to `/accounts/api_key`
3. The retrieved API key is stored in the credentials context
4. Components can access the API key via `useCredentials()` hook

## Security Considerations

- Auth tokens are stored in localStorage while session is maintained via HTTP-only cookies
- API endpoints enforce authentication server-side
- Cross-Origin requests are protected by CORS policies
- Sensitive credentials are never exposed in client-side code
